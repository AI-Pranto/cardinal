      include 'nek_moose.f'
c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /flux_reconstructed/flux_recon(lx1,ly1,lz1,lelt)

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 17.0
      temp = 573.0
      flux = abs(flux_recon(ix,iy,iz,gllel(eg))) ! flux does not have sign

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.17
      temp = 573.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

      include 'SIZE'
      include 'TOTAL'
      include 'NEKMOOSE'
c      implicit none
      COMMON /SCNRS/ SC_NRS(LX1*LY1*LZ1*LELT*7)
      real           SC_NRS
      common /flux_reconstructed/flux_recon(lx1,ly1,lz1,lelt)
      
      integer n_count
      save n_count
   
      ifflow=.false. 
      n=lx1*ly1*lz1*nelt

c      if (istep.eq.0) then
c      do i=1,n
c       xm1(i,1,1,1)=xm1(i,1,1,1)*100.0
c       ym1(i,1,1,1)=ym1(i,1,1,1)*100.0
c       zm1(i,1,1,1)=zm1(i,1,1,1)*100.0 
c      enddo 
c      call fix_geom(2)
c      endif 

c      if (istep.eq.0) sc_nrs(1) = 2.0
c      if (nid.eq.0) then 
c        write(6,*) "Test for Cardinal :", SC_NRS(1)
c      endif 

       n_count=n_count+1

       ! The first call is at time step zero  
       
       if ((1+1+nw_bdt*4*5+n).gt.(7*n)) then
          if (nid.eq.0) write(6,*) "> Insufficient scratch memory"
          call exitt() 
       endif     
     
       if (n_count.gt.2) then 
       if (mod(n_count,2).eq.1) then
          if (nid.eq.0) write(6,*) "> DOWNLOADING FLUX"
          do i=1,nw_bdt*4
             pc_f(i)=sc_nrs(1+i+nw_bdt*4*4)*10000.0
          enddo
          flux_moose=sc_nrs(1+1+nw_bdt*4*5)
          call flux_reconstruction() 
          do i=1,n
            sc_nrs(1+1+nw_bdt*4*5+i)=flux_recon(i,1,1,1)
          enddo 
       endif
       
       if (mod(n_count,2).eq.0) then
          if (nid.eq.0) write(6,*) "> LOADING TEMPERATURE"
          tmin=glmin(t,n)
          tmax=glmax(t,n)
          if (nid.eq.0) then
           write(6,*) "> Temperature: ", tmin," - ", tmax
          endif  
          call nek_interpolation() 
          do i=1,nw_bdt*4
             sc_nrs(1+i+nw_bdt*4*3)=pc_t(i)
          enddo
       endif 
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      ifheat=.true.

      param(93)=20
      param(94)=3
      param(95)=5
      param(103)=0.05  

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'NEKMOOSE'
      COMMON /SCNRS/ SC_NRS(LX1*LY1*LZ1*LELT*7)
      real           SC_NRS
      common /flux_reconstructed/flux_recon(lx1,ly1,lz1,lelt)

      integer f,e
      n=lx1*ly1*lz1*nelt

      do e=1,nelt
      do f=1,6
         boundaryID(f,e) = 0
         if (cbc(f,e,1).eq.'P  ') then
           cbc(f,e,2)='P  '
           do i=1,5
             bc(i,f,e,2)=bc(i,f,e,1)
           enddo
         endif
         if (cbc(f,e,1).eq.'W  ') then
                cbc(f,e,2)='f  '
                boundaryID(f,e) = 1
         endif       
         if (cbc(f,e,1).eq.'O  ') then
                cbc(f,e,2)='I  '
                boundaryID(f,e) = 2                        
         endif
         if (cbc(f,e,1).eq.'v  ') then
                cbc(f,e,2)='t  '
                boundaryID(f,e) = 3                        
         endif
      enddo
      enddo

      igeom = 2
      call setup_topo

      call rzero(flux_recon,n)
      call nek_pointscloud()

c      storing information in common
c      parameter (lsurf_m=60000)
c      common /point_cloudx/ pc_x(lsurf_m*4)
c      common /point_cloudy/ pc_y(lsurf_m*4)
c      common /point_cloudz/ pc_z(lsurf_m*4)
c      common /point_cloudt/ pc_t(lsurf_m*4)
c      common /point_cloudf/ pc_f(lsurf_m*4)
c      common /ref_element/  pc_flag(lsurf_m*4)
c      common /tot_surf/ nw_bdt

!     Units in cm
  
      sc_nrs(1)=nw_bdt
      do i=1,nw_bdt*4
        sc_nrs(1+i)=pc_x(i)*100.0
        sc_nrs(1+i+nw_bdt*4)=pc_y(i)*100.0          
        sc_nrs(1+i+nw_bdt*4*2)=pc_z(i)*100.0 
      enddo

      if (nid.eq.0) then
        do i=1,nw_bdt*4
           write (6,*)i,pc_x(i),pc_y(i),pc_z(i)
        enddo  
      endif
 
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
