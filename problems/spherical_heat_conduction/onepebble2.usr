c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      udiff  = 0.0
      utrans = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c     e = gllel(eg)

      qvol   = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none

      integer ix,iy,iz,iside,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      common /flux_reconstructed/flux_recon(lx1,ly1,lz1,lelt)

c      if (cbc(iside,gllel(eg),ifield).eq.'v01')

      ux   = 0.0
      uy   = 0.0
      uz   = 17.0
      temp = 573.0
      flux = abs(flux_recon(ix,iy,iz,gllel(eg))) ! flux does not have sign

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 573.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      ifflow=.false. 
      n=lx1*ly1*lz1*nelt

c      if (istep.eq.0) then
c      do i=1,n
c       xm1(i,1,1,1)=xm1(i,1,1,1)*100.0
c       ym1(i,1,1,1)=ym1(i,1,1,1)*100.0
c       zm1(i,1,1,1)=zm1(i,1,1,1)*100.0 
c      enddo 
c      call fix_geom(2)
c      endif 

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      ifheat=.true.

      param(93)=20
      param(94)=3
      param(95)=5
      param(103)=0.05  

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      common /flux_reconstructed/flux_recon(lx1,ly1,lz1,lelt)

      integer f,e
      n=lx1*ly1*lz1*nelt

      do e=1,nelt
      do f=1,6
         if (cbc(f,e,1).eq.'P  ') then
           cbc(f,e,2)='P  '
           do i=1,5
             bc(i,f,e,2)=bc(i,f,e,1)
           enddo
         endif
         if (cbc(f,e,1).eq.'W  ') cbc(f,e,2)='f  '
         if (cbc(f,e,1).eq.'O  ') cbc(f,e,2)='O  '
         if (cbc(f,e,1).eq.'v  ') cbc(f,e,2)='t  '
      enddo
      enddo

      igeom = 2
      call setup_topo

      call rzero(flux_recon,n)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
